// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tree.proto

package messages

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateTree struct {
	LeafSize int32 `protobuf:"varint,1,opt,name=LeafSize,proto3" json:"LeafSize,omitempty"`
}

func (m *CreateTree) Reset()      { *m = CreateTree{} }
func (*CreateTree) ProtoMessage() {}
func (*CreateTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{0}
}
func (m *CreateTree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTree.Merge(m, src)
}
func (m *CreateTree) XXX_Size() int {
	return m.Size()
}
func (m *CreateTree) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTree.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTree proto.InternalMessageInfo

func (m *CreateTree) GetLeafSize() int32 {
	if m != nil {
		return m.LeafSize
	}
	return 0
}

type TreeCreated struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TreeID int32  `protobuf:"varint,2,opt,name=TreeID,proto3" json:"TreeID,omitempty"`
}

func (m *TreeCreated) Reset()      { *m = TreeCreated{} }
func (*TreeCreated) ProtoMessage() {}
func (*TreeCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{1}
}
func (m *TreeCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeCreated.Merge(m, src)
}
func (m *TreeCreated) XXX_Size() int {
	return m.Size()
}
func (m *TreeCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeCreated.DiscardUnknown(m)
}

var xxx_messageInfo_TreeCreated proto.InternalMessageInfo

func (m *TreeCreated) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TreeCreated) GetTreeID() int32 {
	if m != nil {
		return m.TreeID
	}
	return 0
}

type InvalidRequest struct {
	Token       string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TreeID      int32  `protobuf:"varint,2,opt,name=TreeID,proto3" json:"TreeID,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (m *InvalidRequest) Reset()      { *m = InvalidRequest{} }
func (*InvalidRequest) ProtoMessage() {}
func (*InvalidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{2}
}
func (m *InvalidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidRequest.Merge(m, src)
}
func (m *InvalidRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvalidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidRequest proto.InternalMessageInfo

func (m *InvalidRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *InvalidRequest) GetTreeID() int32 {
	if m != nil {
		return m.TreeID
	}
	return 0
}

func (m *InvalidRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type SuccessfulRequest struct {
	Token       string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TreeID      int32  `protobuf:"varint,2,opt,name=TreeID,proto3" json:"TreeID,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (m *SuccessfulRequest) Reset()      { *m = SuccessfulRequest{} }
func (*SuccessfulRequest) ProtoMessage() {}
func (*SuccessfulRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{3}
}
func (m *SuccessfulRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuccessfulRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuccessfulRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuccessfulRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuccessfulRequest.Merge(m, src)
}
func (m *SuccessfulRequest) XXX_Size() int {
	return m.Size()
}
func (m *SuccessfulRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuccessfulRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuccessfulRequest proto.InternalMessageInfo

func (m *SuccessfulRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SuccessfulRequest) GetTreeID() int32 {
	if m != nil {
		return m.TreeID
	}
	return 0
}

func (m *SuccessfulRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Add struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TreeID int32  `protobuf:"varint,2,opt,name=TreeID,proto3" json:"TreeID,omitempty"`
	Key    int32  `protobuf:"varint,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Value  string `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *Add) Reset()      { *m = Add{} }
func (*Add) ProtoMessage() {}
func (*Add) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{4}
}
func (m *Add) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Add) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Add.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Add) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Add.Merge(m, src)
}
func (m *Add) XXX_Size() int {
	return m.Size()
}
func (m *Add) XXX_DiscardUnknown() {
	xxx_messageInfo_Add.DiscardUnknown(m)
}

var xxx_messageInfo_Add proto.InternalMessageInfo

func (m *Add) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Add) GetTreeID() int32 {
	if m != nil {
		return m.TreeID
	}
	return 0
}

func (m *Add) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *Add) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Find struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TreeID int32  `protobuf:"varint,2,opt,name=TreeID,proto3" json:"TreeID,omitempty"`
	Key    int32  `protobuf:"varint,3,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *Find) Reset()      { *m = Find{} }
func (*Find) ProtoMessage() {}
func (*Find) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{5}
}
func (m *Find) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Find) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Find.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Find) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Find.Merge(m, src)
}
func (m *Find) XXX_Size() int {
	return m.Size()
}
func (m *Find) XXX_DiscardUnknown() {
	xxx_messageInfo_Find.DiscardUnknown(m)
}

var xxx_messageInfo_Find proto.InternalMessageInfo

func (m *Find) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Find) GetTreeID() int32 {
	if m != nil {
		return m.TreeID
	}
	return 0
}

func (m *Find) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

type Found struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TreeID int32  `protobuf:"varint,2,opt,name=TreeID,proto3" json:"TreeID,omitempty"`
	Key    int32  `protobuf:"varint,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Value  string `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *Found) Reset()      { *m = Found{} }
func (*Found) ProtoMessage() {}
func (*Found) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{6}
}
func (m *Found) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Found) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Found.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Found) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Found.Merge(m, src)
}
func (m *Found) XXX_Size() int {
	return m.Size()
}
func (m *Found) XXX_DiscardUnknown() {
	xxx_messageInfo_Found.DiscardUnknown(m)
}

var xxx_messageInfo_Found proto.InternalMessageInfo

func (m *Found) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Found) GetTreeID() int32 {
	if m != nil {
		return m.TreeID
	}
	return 0
}

func (m *Found) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *Found) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Remove struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TreeID int32  `protobuf:"varint,2,opt,name=TreeID,proto3" json:"TreeID,omitempty"`
	Key    int32  `protobuf:"varint,3,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *Remove) Reset()      { *m = Remove{} }
func (*Remove) ProtoMessage() {}
func (*Remove) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{7}
}
func (m *Remove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Remove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Remove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Remove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Remove.Merge(m, src)
}
func (m *Remove) XXX_Size() int {
	return m.Size()
}
func (m *Remove) XXX_DiscardUnknown() {
	xxx_messageInfo_Remove.DiscardUnknown(m)
}

var xxx_messageInfo_Remove proto.InternalMessageInfo

func (m *Remove) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Remove) GetTreeID() int32 {
	if m != nil {
		return m.TreeID
	}
	return 0
}

func (m *Remove) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

type Traverse struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TreeID int32  `protobuf:"varint,2,opt,name=TreeID,proto3" json:"TreeID,omitempty"`
}

func (m *Traverse) Reset()      { *m = Traverse{} }
func (*Traverse) ProtoMessage() {}
func (*Traverse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{8}
}
func (m *Traverse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Traverse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Traverse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Traverse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Traverse.Merge(m, src)
}
func (m *Traverse) XXX_Size() int {
	return m.Size()
}
func (m *Traverse) XXX_DiscardUnknown() {
	xxx_messageInfo_Traverse.DiscardUnknown(m)
}

var xxx_messageInfo_Traverse proto.InternalMessageInfo

func (m *Traverse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Traverse) GetTreeID() int32 {
	if m != nil {
		return m.TreeID
	}
	return 0
}

type Pair struct {
	Key   int32  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Pair) Reset()      { *m = Pair{} }
func (*Pair) ProtoMessage() {}
func (*Pair) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{9}
}
func (m *Pair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pair.Merge(m, src)
}
func (m *Pair) XXX_Size() int {
	return m.Size()
}
func (m *Pair) XXX_DiscardUnknown() {
	xxx_messageInfo_Pair.DiscardUnknown(m)
}

var xxx_messageInfo_Pair proto.InternalMessageInfo

func (m *Pair) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *Pair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TraversedAnswer struct {
	Pairs []*Pair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (m *TraversedAnswer) Reset()      { *m = TraversedAnswer{} }
func (*TraversedAnswer) ProtoMessage() {}
func (*TraversedAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{10}
}
func (m *TraversedAnswer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraversedAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraversedAnswer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TraversedAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraversedAnswer.Merge(m, src)
}
func (m *TraversedAnswer) XXX_Size() int {
	return m.Size()
}
func (m *TraversedAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_TraversedAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_TraversedAnswer proto.InternalMessageInfo

func (m *TraversedAnswer) GetPairs() []*Pair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type Delete struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	TreeID int32  `protobuf:"varint,2,opt,name=TreeID,proto3" json:"TreeID,omitempty"`
}

func (m *Delete) Reset()      { *m = Delete{} }
func (*Delete) ProtoMessage() {}
func (*Delete) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3889276909882a, []int{11}
}
func (m *Delete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delete.Merge(m, src)
}
func (m *Delete) XXX_Size() int {
	return m.Size()
}
func (m *Delete) XXX_DiscardUnknown() {
	xxx_messageInfo_Delete.DiscardUnknown(m)
}

var xxx_messageInfo_Delete proto.InternalMessageInfo

func (m *Delete) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Delete) GetTreeID() int32 {
	if m != nil {
		return m.TreeID
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateTree)(nil), "messages.CreateTree")
	proto.RegisterType((*TreeCreated)(nil), "messages.TreeCreated")
	proto.RegisterType((*InvalidRequest)(nil), "messages.InvalidRequest")
	proto.RegisterType((*SuccessfulRequest)(nil), "messages.SuccessfulRequest")
	proto.RegisterType((*Add)(nil), "messages.Add")
	proto.RegisterType((*Find)(nil), "messages.Find")
	proto.RegisterType((*Found)(nil), "messages.Found")
	proto.RegisterType((*Remove)(nil), "messages.Remove")
	proto.RegisterType((*Traverse)(nil), "messages.Traverse")
	proto.RegisterType((*Pair)(nil), "messages.Pair")
	proto.RegisterType((*TraversedAnswer)(nil), "messages.TraversedAnswer")
	proto.RegisterType((*Delete)(nil), "messages.Delete")
}

func init() { proto.RegisterFile("tree.proto", fileDescriptor_cb3889276909882a) }

var fileDescriptor_cb3889276909882a = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xb1, 0x6a, 0xdb, 0x50,
	0x14, 0x86, 0x75, 0x2d, 0x4b, 0xb8, 0xc7, 0xe0, 0xb6, 0xa2, 0x14, 0xd1, 0xe1, 0x62, 0x2e, 0x1d,
	0x3c, 0x69, 0x68, 0x4b, 0x5b, 0xe8, 0xe4, 0xd6, 0x98, 0x9a, 0x76, 0x28, 0xb2, 0xe9, 0x52, 0x0a,
	0xbd, 0x95, 0x8e, 0x83, 0xb0, 0x2c, 0x39, 0xf7, 0x4a, 0x0a, 0xce, 0x94, 0x47, 0xc8, 0x63, 0xe4,
	0x51, 0x32, 0x7a, 0xf4, 0x18, 0xcb, 0x4b, 0x46, 0x3f, 0x42, 0xb8, 0x57, 0x76, 0xc8, 0x2a, 0x8c,
	0xb7, 0xf3, 0x4b, 0xff, 0xff, 0x9d, 0x5f, 0xa0, 0x03, 0x90, 0x09, 0x44, 0x6f, 0x21, 0xd2, 0x2c,
	0x75, 0x5a, 0x73, 0x94, 0x92, 0x9f, 0xa1, 0x64, 0x3d, 0x80, 0x6f, 0x02, 0x79, 0x86, 0x13, 0x81,
	0xe8, 0xbc, 0x81, 0xd6, 0x4f, 0xe4, 0xd3, 0x71, 0x74, 0x89, 0x2e, 0xe9, 0x92, 0x9e, 0xe5, 0x3f,
	0x6a, 0xf6, 0x05, 0xda, 0xca, 0x53, 0xb9, 0x43, 0xe7, 0x15, 0x58, 0x93, 0x74, 0x86, 0x89, 0xf6,
	0x3d, 0xf3, 0x2b, 0xe1, 0xbc, 0x06, 0x5b, 0x99, 0x46, 0x03, 0xb7, 0xa1, 0xe3, 0x7b, 0xc5, 0xfe,
	0x41, 0x67, 0x94, 0x14, 0x3c, 0x8e, 0x42, 0x1f, 0xcf, 0x73, 0x94, 0x59, 0xbd, 0xbc, 0xd3, 0x85,
	0xf6, 0x00, 0x65, 0x20, 0xa2, 0x45, 0x16, 0xa5, 0x89, 0x6b, 0xea, 0xcc, 0xd3, 0x47, 0x2c, 0x80,
	0x97, 0xe3, 0x3c, 0x08, 0x50, 0xca, 0x69, 0x1e, 0x9f, 0x6a, 0xc9, 0x1f, 0x30, 0xfb, 0x61, 0xcd,
	0x6f, 0x77, 0x5e, 0x80, 0xf9, 0x03, 0x97, 0x1a, 0x67, 0xf9, 0x6a, 0x54, 0xf9, 0xdf, 0x3c, 0xce,
	0xd1, 0x6d, 0x56, 0x79, 0x2d, 0xd8, 0x10, 0x9a, 0xc3, 0x28, 0x39, 0x9a, 0xce, 0xfe, 0x82, 0x35,
	0x4c, 0xf3, 0xe4, 0x54, 0x35, 0xbf, 0x83, 0xed, 0xe3, 0x3c, 0x2d, 0xf0, 0xe8, 0xa2, 0x9f, 0xa1,
	0x35, 0x11, 0xbc, 0x40, 0x21, 0x6b, 0xb2, 0x98, 0x07, 0xcd, 0x5f, 0x3c, 0x12, 0x8a, 0x39, 0xc3,
	0xe5, 0xfe, 0x57, 0x55, 0xa3, 0xe2, 0x14, 0xba, 0x73, 0xa3, 0xe2, 0x68, 0xc1, 0x3e, 0xc1, 0xf3,
	0xc3, 0xa6, 0xb0, 0x9f, 0xc8, 0x0b, 0x14, 0xce, 0x5b, 0xb0, 0x16, 0x3c, 0x12, 0xd2, 0x25, 0x5d,
	0xb3, 0xd7, 0x7e, 0xd7, 0xf1, 0x0e, 0x27, 0xe1, 0x29, 0xb2, 0x5f, 0xbd, 0x64, 0x1f, 0xc1, 0x1e,
	0x60, 0x8c, 0x59, 0xcd, 0x82, 0x5f, 0x3f, 0xac, 0x36, 0xd4, 0x58, 0x6f, 0xa8, 0xb1, 0xdb, 0x50,
	0x72, 0x55, 0x52, 0x72, 0x53, 0x52, 0x72, 0x5b, 0x52, 0xb2, 0x2a, 0x29, 0xb9, 0x2b, 0x29, 0xb9,
	0x2f, 0xa9, 0xb1, 0x2b, 0x29, 0xb9, 0xde, 0x52, 0x63, 0xb5, 0xa5, 0xc6, 0x7a, 0x4b, 0x8d, 0xff,
	0xb6, 0xbe, 0xce, 0xf7, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x52, 0x0a, 0x2f, 0xab, 0x03,
	0x00, 0x00,
}

func (this *CreateTree) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTree)
	if !ok {
		that2, ok := that.(CreateTree)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LeafSize != that1.LeafSize {
		return false
	}
	return true
}
func (this *TreeCreated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TreeCreated)
	if !ok {
		that2, ok := that.(TreeCreated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.TreeID != that1.TreeID {
		return false
	}
	return true
}
func (this *InvalidRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InvalidRequest)
	if !ok {
		that2, ok := that.(InvalidRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.TreeID != that1.TreeID {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *SuccessfulRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuccessfulRequest)
	if !ok {
		that2, ok := that.(SuccessfulRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.TreeID != that1.TreeID {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *Add) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Add)
	if !ok {
		that2, ok := that.(Add)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.TreeID != that1.TreeID {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Find) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Find)
	if !ok {
		that2, ok := that.(Find)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.TreeID != that1.TreeID {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *Found) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Found)
	if !ok {
		that2, ok := that.(Found)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.TreeID != that1.TreeID {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Remove) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Remove)
	if !ok {
		that2, ok := that.(Remove)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.TreeID != that1.TreeID {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *Traverse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Traverse)
	if !ok {
		that2, ok := that.(Traverse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.TreeID != that1.TreeID {
		return false
	}
	return true
}
func (this *Pair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pair)
	if !ok {
		that2, ok := that.(Pair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *TraversedAnswer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TraversedAnswer)
	if !ok {
		that2, ok := that.(TraversedAnswer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pairs) != len(that1.Pairs) {
		return false
	}
	for i := range this.Pairs {
		if !this.Pairs[i].Equal(that1.Pairs[i]) {
			return false
		}
	}
	return true
}
func (this *Delete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Delete)
	if !ok {
		that2, ok := that.(Delete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.TreeID != that1.TreeID {
		return false
	}
	return true
}
func (this *CreateTree) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.CreateTree{")
	s = append(s, "LeafSize: "+fmt.Sprintf("%#v", this.LeafSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TreeCreated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.TreeCreated{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "TreeID: "+fmt.Sprintf("%#v", this.TreeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InvalidRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.InvalidRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "TreeID: "+fmt.Sprintf("%#v", this.TreeID)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuccessfulRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.SuccessfulRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "TreeID: "+fmt.Sprintf("%#v", this.TreeID)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Add) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.Add{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "TreeID: "+fmt.Sprintf("%#v", this.TreeID)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Find) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.Find{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "TreeID: "+fmt.Sprintf("%#v", this.TreeID)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Found) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.Found{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "TreeID: "+fmt.Sprintf("%#v", this.TreeID)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Remove) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.Remove{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "TreeID: "+fmt.Sprintf("%#v", this.TreeID)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Traverse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.Traverse{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "TreeID: "+fmt.Sprintf("%#v", this.TreeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pair) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.Pair{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TraversedAnswer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.TraversedAnswer{")
	if this.Pairs != nil {
		s = append(s, "Pairs: "+fmt.Sprintf("%#v", this.Pairs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Delete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.Delete{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "TreeID: "+fmt.Sprintf("%#v", this.TreeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTree(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateTree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTree) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LeafSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.LeafSize))
	}
	return i, nil
}

func (m *TreeCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeCreated) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.TreeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.TreeID))
	}
	return i, nil
}

func (m *InvalidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.TreeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.TreeID))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *SuccessfulRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuccessfulRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.TreeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.TreeID))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *Add) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Add) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.TreeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.TreeID))
	}
	if m.Key != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.Key))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Find) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Find) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.TreeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.TreeID))
	}
	if m.Key != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.Key))
	}
	return i, nil
}

func (m *Found) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Found) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.TreeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.TreeID))
	}
	if m.Key != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.Key))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Remove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Remove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.TreeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.TreeID))
	}
	if m.Key != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.Key))
	}
	return i, nil
}

func (m *Traverse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Traverse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.TreeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.TreeID))
	}
	return i, nil
}

func (m *Pair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.Key))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *TraversedAnswer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraversedAnswer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, msg := range m.Pairs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Delete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.TreeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.TreeID))
	}
	return i, nil
}

func encodeVarintTree(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateTree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeafSize != 0 {
		n += 1 + sovTree(uint64(m.LeafSize))
	}
	return n
}

func (m *TreeCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	if m.TreeID != 0 {
		n += 1 + sovTree(uint64(m.TreeID))
	}
	return n
}

func (m *InvalidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	if m.TreeID != 0 {
		n += 1 + sovTree(uint64(m.TreeID))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	return n
}

func (m *SuccessfulRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	if m.TreeID != 0 {
		n += 1 + sovTree(uint64(m.TreeID))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	return n
}

func (m *Add) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	if m.TreeID != 0 {
		n += 1 + sovTree(uint64(m.TreeID))
	}
	if m.Key != 0 {
		n += 1 + sovTree(uint64(m.Key))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	return n
}

func (m *Find) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	if m.TreeID != 0 {
		n += 1 + sovTree(uint64(m.TreeID))
	}
	if m.Key != 0 {
		n += 1 + sovTree(uint64(m.Key))
	}
	return n
}

func (m *Found) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	if m.TreeID != 0 {
		n += 1 + sovTree(uint64(m.TreeID))
	}
	if m.Key != 0 {
		n += 1 + sovTree(uint64(m.Key))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	return n
}

func (m *Remove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	if m.TreeID != 0 {
		n += 1 + sovTree(uint64(m.TreeID))
	}
	if m.Key != 0 {
		n += 1 + sovTree(uint64(m.Key))
	}
	return n
}

func (m *Traverse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	if m.TreeID != 0 {
		n += 1 + sovTree(uint64(m.TreeID))
	}
	return n
}

func (m *Pair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovTree(uint64(m.Key))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	return n
}

func (m *TraversedAnswer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovTree(uint64(l))
		}
	}
	return n
}

func (m *Delete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTree(uint64(l))
	}
	if m.TreeID != 0 {
		n += 1 + sovTree(uint64(m.TreeID))
	}
	return n
}

func sovTree(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTree(x uint64) (n int) {
	return sovTree(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateTree) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTree{`,
		`LeafSize:` + fmt.Sprintf("%v", this.LeafSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeCreated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeCreated{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TreeID:` + fmt.Sprintf("%v", this.TreeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InvalidRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InvalidRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TreeID:` + fmt.Sprintf("%v", this.TreeID) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuccessfulRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuccessfulRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TreeID:` + fmt.Sprintf("%v", this.TreeID) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Add) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Add{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TreeID:` + fmt.Sprintf("%v", this.TreeID) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Find) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Find{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TreeID:` + fmt.Sprintf("%v", this.TreeID) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Found) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Found{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TreeID:` + fmt.Sprintf("%v", this.TreeID) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Remove) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Remove{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TreeID:` + fmt.Sprintf("%v", this.TreeID) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Traverse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Traverse{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TreeID:` + fmt.Sprintf("%v", this.TreeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pair{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraversedAnswer) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPairs := "[]*Pair{"
	for _, f := range this.Pairs {
		repeatedStringForPairs += strings.Replace(f.String(), "Pair", "Pair", 1) + ","
	}
	repeatedStringForPairs += "}"
	s := strings.Join([]string{`&TraversedAnswer{`,
		`Pairs:` + repeatedStringForPairs + `,`,
		`}`,
	}, "")
	return s
}
func (this *Delete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Delete{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TreeID:` + fmt.Sprintf("%v", this.TreeID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTree(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateTree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafSize", wireType)
			}
			m.LeafSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeafSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeID", wireType)
			}
			m.TreeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeID", wireType)
			}
			m.TreeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuccessfulRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuccessfulRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuccessfulRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeID", wireType)
			}
			m.TreeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Add) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Add: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Add: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeID", wireType)
			}
			m.TreeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Find) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Find: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Find: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeID", wireType)
			}
			m.TreeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Found) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Found: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Found: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeID", wireType)
			}
			m.TreeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Remove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Remove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Remove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeID", wireType)
			}
			m.TreeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Traverse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Traverse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Traverse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeID", wireType)
			}
			m.TreeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraversedAnswer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraversedAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraversedAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, &Pair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeID", wireType)
			}
			m.TreeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTree(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTree
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTree
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTree
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTree
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTree(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTree
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTree = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTree   = fmt.Errorf("proto: integer overflow")
)
